<?php

// namespace App\includes;

// 应用自定义 Walker 类到导航菜单
function custom_nav_menu_args($args) {
    $args['walker'] = new Custom_Walker_Nav_Menu();
    return $args;
}
add_filter('wp_nav_menu_args', 'custom_nav_menu_args');

/**
 * 在 WordPress 中，生成导航菜单时，默认情况下子菜单（第二级及以下级别的菜单项）会以 <ul> 和 <li> 元素的形式输出，通常不包装在 <div> 元素中。
 * 如果你希望在子菜单项的外层添加 <div> 包装元素，你可以通过编写自定义 Walker 类来实现。
 */
class Custom_Walker_Nav_Menu extends Walker_Nav_Menu
{
    public function start_lvl(&$output, $depth = 0, $args = null)
    {
        // parent::start_lvl($output, $depth, $args); // TODO: Change the autogenerated stub

        if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
            $t = '';
            $n = '';
        } else {
            $t = "\t";
            $n = "\n";
        }
        $indent = str_repeat( $t, $depth );

        // Default class.
        $classes = array( 'sub-menu' );

        /**
         * Filters the CSS class(es) applied to a menu list element.
         *
         * @since 4.8.0
         *
         * @param string[] $classes Array of the CSS classes that are applied to the menu `<ul>` element.
         * @param stdClass $args    An object of `wp_nav_menu()` arguments.
         * @param int      $depth   Depth of menu item. Used for padding.
         */
        $class_names = implode( ' ', apply_filters( 'nav_menu_submenu_css_class', $classes, $args, $depth ) );
        $class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';

        // 使用正则表达式（负向前瞻断言）来匹配并剔除最后一个 <a> 标签及其内容，并捕获内容
        $pattern = '/<a [^>]*>([^<]*)<\/a>(?![\s\S]*<a [^>]*>[^<]*<\/a>)/'; // 添加捕获组
        preg_match($pattern, $output, $matches);

        // 输出剔除最后一个 <a> 标签后的 $output
        $output = preg_replace($pattern, '', $output);

        // 输出被剔除的内容
        if (isset($matches[1])) {
            $extractedContent = $matches[1];
        } else {
            $extractedContent = ''; // 如果没有匹配到内容，则为空
        }

        // echo $output;

        // echo "Extracted Content: $extractedContent";

        $output .= "<details><summary>$extractedContent</summary>{$n}{$indent}<ul$class_names>{$n}";

        // // 在子菜单 ul 元素开始前添加自定义 div
        // if ($depth > 0) {
        //     $output .= '<div class="custom-wrapper">';
        // }
        // $output .= '<ul>';
    }

    public function end_lvl(&$output, $depth = 0, $args = null)
    {
        // parent::end_lvl($output, $depth, $args); // TODO: Change the autogenerated stub

        if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
            $t = '';
            $n = '';
        } else {
            $t = "\t";
            $n = "\n";
        }
        $indent  = str_repeat( $t, $depth );
        $output .= "$indent</ul>{$n}</details>";

        // $output .= '</ul>';
        // // 在子菜单 ul 元素结束后关闭自定义 div
        // if ($depth > 0) {
        //     $output .= '</div>';
        // }
    }
}

/**
 * 添加自定义 CSS 类到子菜单 ul 元素
 *
 * 钩子触发地方 cmd + shift + f 搜索「// Default class.」
 * {@link wp-includes/class-walker-nav-menu.php start_lvl()}
 */
function custom_submenu_classes($classes, $args, $depth) {
    // 在这里添加你希望的 CSS 类，例如 'p-2'
    $classes[] = 'p-2 text-black';

    return $classes;
}
add_filter('nav_menu_submenu_css_class', 'custom_submenu_classes', 10, 3);
